#!env zsh
GIVEN_BRANCH=${1:-$(_gb)}
LOCAL_BRANCH=${GIVEN_BRANCH#remotes/*/}  # strip remotes/ prefix
for REMOTE in $(git remote); do
    LOCAL_BRANCH=${LOCAL_BRANCH#$REMOTE/} # strip remote names
done
SHORT_BRANCH=${LOCAL_BRANCH##*/} # strip prefices included in the branch name

DEFAULT_REMOTE=$(git remote | head -1)
REMOTE_HEAD=$(git branch --remotes | grep ${DEFAULT_REMOTE}/HEAD | head -1 | sed -e "s:.*->[^/]*/::")
REMOTE_HEAD=${REMOTE_HEAD:-${DEFAULT_REMOTE:+$(git remote show ${DEFAULT_REMOTE} | grep 'HEAD branch' | cut -d' ' -f5)}}
EXISTING_BRANCH=$(
    git branch    | cut -c3- | grep -o "^${LOCAL_BRANCH}$" || # in case local branch exists
    git branch    | cut -c3- | grep -o "^${SHORT_BRANCH}$" || # in case local branch exists with short name
    git branch -r | cut -c3- | grep -o "^${GIVEN_BRANCH}$" || # in case remotes/ is not included
    git branch -a | cut -c3- | grep -o "^${GIVEN_BRANCH}$" || # in case remotes/ is included
    git branch -a | cut -c3- | grep -o "remotes/.*/${SHORT_BRANCH}$" | head -1 # in case remote branch exists with short name
)
TARGET_BRANCH=${EXISTING_BRANCH:-${REMOTE_HEAD:+${DEFAULT_REMOTE}/${REMOTE_HEAD}}}  # in case of a new branch
TARGET_BRANCH=${TARGET_BRANCH:-HEAD}                           # in case of a new branch and there is no remote

WINDOWS_GIT=$(git --version|grep -o windows)
PATH_CONVERT_COMMAND=${WINDOWS_GIT:+wslpath}        # wslpath if $WINDOWS_GIT is nonempty
PATH_CONVERT_COMMAND=${PATH_CONVERT_COMMAND:-echo}  # echo    otherwise
pp () {$PATH_CONVERT_COMMAND "$@"}
BASE_DIR="$(git worktree list | head -1 | cut -d' ' -f1)"
G="$(pp "$BASE_DIR")"
C="$(pp "$BASE_DIR/current")"

EXISTING_WORKTREE="$(git worktree list | grep "\[${TARGET_BRANCH}]" | cut -d' ' -f1)"
TARGET_WORKTREE="${EXISTING_WORKTREE:-${BASE_DIR}/${SHORT_BRANCH}}"
W="$(pp "${TARGET_WORKTREE}")"
echo "Target directory: $W"

if [ ! -d "$W" ]; then
    echo "> git worktree add $W $TARGET_BRANCH -B ${SHORT_BRANCH}"
    git worktree add $W $TARGET_BRANCH -B ${SHORT_BRANCH} || return
    #echo "> git branch --set-upstream-to=${GIVEN_BRANCH}"
    #git branch --set-upstream-to=${GIVEN_BRANCH}
fi

rm -f $W/.git
echo "gitdir: ../.git/worktrees/$(basename $W)" > $W/.git

LOCAL_REPO=$(git rev-parse --show-toplevel)
echo "Set up $W from $(pp ${LOCAL_REPO})"
[ -f "$(pp ${LOCAL_REPO}/.idea)" ] && ln -sf "$(readlink -f "$(pp ${LOCAL_REPO}/.idea)")" $W/.idea
[ -f "$(pp ${LOCAL_REPO}/venv)" ] && ln -sf "$(readlink -f "$(pp ${LOCAL_REPO}/venv)")" $W/venv
[ -f "$(pp ${LOCAL_REPO}/CMakeUserPresets.json)" ] && ln -f "$(readlink -f "$(pp ${LOCAL_REPO}/CMakeUserPresets.json)")" $W/CMakeUserPresets.json
[ -f "$(pp ${LOCAL_REPO}/justfile)" ] && ln -f "$(readlink -f "$(pp ${LOCAL_REPO}/justfile)")" $W/justfile

echo "Link $W to $C"
rm -f $C
ln -sf $W $C
cd $C
