#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your git author name?'
    read -e git_authorname
    user ' - What is your git author email?'
    read -e git_authoremail

    mkdir -p git
    sed -e "s/AUTHORNAME/$git_authorname/g" \
        -e "s/AUTHOREMAIL/$git_authoremail/g" \
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
        -e "s^DOTFILES_ROOT^${DOTFILES_ROOT}^g" \
        $DOTFILES_ROOT/git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 3 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  mkdir -p $HOME/.config
  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 3 -name '*.configsymlink' -not -path '*.git*')
  do
    dst="$HOME/.config/$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_dotfiles_sync () {
  TARGETS="$DOTFILES_ROOT $HOME/dev/hjdocs $HOME/dev/hjdocs/public-docs $HOME/dev/i $HOME/pp/insuk-www"
  TARGETS="$TARGETS $HOME/devm/hjdocs $HOME/devm/hjdocs/public-docs $HOME/devm/i"
  info "setup periodic sync for $TARGETS"
  (
    GIT_EXECUTABLE_FINDING="$(which -a git.exe git 2>/dev/null | head -1)"
    GIT_SUBREPO=${DOTFILES_ROOT}/git/git-subrepo/lib/git-subrepo
    for SYNC_TARGET in $TARGETS;
    do
      if [ -d "$SYNC_TARGET" ]
      then
        echo "$(( RANDOM % 10 ))-59/10 * * * * GIT_EXECUTABLE=$GIT_EXECUTABLE_FINDING GIT_SUBREPO=${GIT_SUBREPO} $DOTFILES_ROOT/script/sync_dotfiles $SYNC_TARGET 2>&1 | grep -i -C1000 conflict"
      fi
     done

    #MINUTE=$RANDOM
    #let "MINUTE %= 60"
    #echo "#$MINUTE * * * * $DOTFILES_ROOT/script/bin/send-ip-address-to $git_authoremail"
  ) | tee /tmp/bootstrap-debug-crontab | crontab -
}

setup_pbcopy_from_ssh () {
  which launchctl >/dev/null 2>&1 || return
  rm -f ~/Library/LaunchAgents/pbcopy.plist
  ln -s $DOTFILES_ROOT/zsh/pbcopy.plist ~/Library/LaunchAgents/
  launchctl load -w ~/Library/LaunchAgents/pbcopy.plist
  echo 'Add the following in the host entries in ~/.ssh/config'
  echo '    RemoteForward 2224 127.0.0.1:2224'
}

setup_gitconfig
#git submodule update --init --remote --recursive
for sm in $($DOTFILES_ROOT/zsh/functions/gSl); do
    git config submodule.$sm.active false
done

install_dotfiles
setup_dotfiles_sync
setup_pbcopy_from_ssh

#bash -x $DOTFILES_ROOT/script/install

echo ''
echo '  All installed!'
