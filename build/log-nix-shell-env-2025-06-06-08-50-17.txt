Restored session: Fri  6 Jun 2025 08:20:22 BST
bash: bind: command not found
++ __hishtory_precommand
++ '[' -z '' ']'
++ return
+ just setup_shell
alias jb="just b"
alias jbuild="just build"
alias jbuild_AVLivingRoomClient="just build_AVLivingRoomClient"
alias jbuild_AVLivingRoomClientBootstrap="just build_AVLivingRoomClientBootstrap"
alias jbuild_AVLivingRoomClientBundle="just build_AVLivingRoomClientBundle"
alias jbuild_AVLivingRoomClientHybridCommon="just build_AVLivingRoomClientHybridCommon"
alias jbuild_AVLivingRoomRustClient="just build_AVLivingRoomRustClient"
alias jbuild_AvLrcMinervaMetricSchemas="just build_AvLrcMinervaMetricSchemas"
alias jbuild_Brotli="just build_Brotli"
alias jbuild_IgnitionXJSBundle="just build_IgnitionXJSBundle"
alias jbuild_IgnitionXRustBundle="just build_IgnitionXRustBundle"
alias jbuild_RokuNDK="just build_RokuNDK"
alias jbuild_RustStdRoku="just build_RustStdRoku"
alias jbuild_only="just build_only"
alias jc="just c"
alias jclean="just clean"
alias jclean_all="just clean_all"
alias jclean_everything="just clean_everything"
alias jcollect_rust_deps="just collect_rust_deps"
alias jcp="just cp"
alias jfresh="just fresh"
alias jinit="just init"
alias jinit_AVLivingRoomClient="just init_AVLivingRoomClient"
alias jinit_AVLivingRoomClientBootstrap="just init_AVLivingRoomClientBootstrap"
alias jinit_AVLivingRoomClientHybridCommon="just init_AVLivingRoomClientHybridCommon"
alias jinit_AVLivingRoomRustClient="just init_AVLivingRoomRustClient"
alias jinit_Brotli="just init_Brotli"
alias jinit_IgnitionXRustBundle="just init_IgnitionXRustBundle"
alias jinit_only="just init_only"
alias jmwinit="just mwinit"
alias jmwinitf="just mwinitf"
alias jnative_app="just native_app"
alias jnative_example="just native_example"
alias jnative_roku="just native_roku"
alias jnew-ws="just new-ws"
alias jpre_build="just pre_build"
alias jpre_build_AVLivingRoomRustClient="just pre_build_AVLivingRoomRustClient"
alias jpre_build_RustStdRoku="just pre_build_RustStdRoku"
alias jpre_build_only="just pre_build_only"
alias jrecurse="just recurse"
alias jrelease="just release"
alias jrelease_AVLivingRoomClientBundle="just release_AVLivingRoomClientBundle"
alias jrelease_AVLivingRoomRustClient="just release_AVLivingRoomRustClient"
alias jrelease_IgnitionXRustBundle="just release_IgnitionXRustBundle"
alias jrelease_only="just release_only"
alias jrun="just run"
alias jrun_with_brazil_env="just run_with_brazil_env"
alias jsetup_git="just setup_git"
alias jsetup_shell="just setup_shell"
alias jsync="just sync"
alias jsyncmd="just syncmd"
alias jupload-diff-for-review="just upload-diff-for-review"
alias jws="just ws"
alias jb="just b"
alias jbuild="just build"
alias jbuild_AVLivingRoomClient="just build_AVLivingRoomClient"
alias jbuild_AVLivingRoomClientBootstrap="just build_AVLivingRoomClientBootstrap"
alias jbuild_AVLivingRoomClientBundle="just build_AVLivingRoomClientBundle"
alias jbuild_AVLivingRoomClientHybridCommon="just build_AVLivingRoomClientHybridCommon"
alias jbuild_AVLivingRoomRustClient="just build_AVLivingRoomRustClient"
alias jbuild_AvLrcMinervaMetricSchemas="just build_AvLrcMinervaMetricSchemas"
alias jbuild_Brotli="just build_Brotli"
alias jbuild_IgnitionXJSBundle="just build_IgnitionXJSBundle"
alias jbuild_IgnitionXRustBundle="just build_IgnitionXRustBundle"
alias jbuild_RokuNDK="just build_RokuNDK"
alias jbuild_RustStdRoku="just build_RustStdRoku"
alias jbuild_only="just build_only"
alias jc="just c"
alias jclean="just clean"
alias jclean_all="just clean_all"
alias jclean_everything="just clean_everything"
alias jcollect_rust_deps="just collect_rust_deps"
alias jcp="just cp"
alias jfresh="just fresh"
alias jinit="just init"
alias jinit_AVLivingRoomClient="just init_AVLivingRoomClient"
alias jinit_AVLivingRoomClientBootstrap="just init_AVLivingRoomClientBootstrap"
alias jinit_AVLivingRoomClientHybridCommon="just init_AVLivingRoomClientHybridCommon"
alias jinit_AVLivingRoomRustClient="just init_AVLivingRoomRustClient"
alias jinit_Brotli="just init_Brotli"
alias jinit_IgnitionXRustBundle="just init_IgnitionXRustBundle"
alias jinit_only="just init_only"
alias jmwinit="just mwinit"
alias jmwinitf="just mwinitf"
alias jnative_app="just native_app"
alias jnative_example="just native_example"
alias jnative_roku="just native_roku"
alias jnew-ws="just new-ws"
alias jpre_build="just pre_build"
alias jpre_build_AVLivingRoomRustClient="just pre_build_AVLivingRoomRustClient"
alias jpre_build_RustStdRoku="just pre_build_RustStdRoku"
alias jpre_build_only="just pre_build_only"
alias jrecurse="just recurse"
alias jrelease="just release"
alias jrelease_AVLivingRoomClientBundle="just release_AVLivingRoomClientBundle"
alias jrelease_AVLivingRoomRustClient="just release_AVLivingRoomRustClient"
alias jrelease_IgnitionXRustBundle="just release_IgnitionXRustBundle"
alias jrelease_only="just release_only"
alias jrun="just run"
alias jrun_with_brazil_env="just run_with_brazil_env"
alias jsetup_shell="just setup_shell"
alias jsync="just sync"
alias jsyncmd="just syncmd"
alias jupload-diff-for-review="just upload-diff-for-review"
alias jws="just ws"
alias jm="just mwinit"
alias jmf="just mwinitf"
_just() {
    local i cur prev words cword opts cmd
    COMPREPLY=()

    # Modules use "::" as the separator, which is considered a wordbreak character in bash.
    # The _get_comp_words_by_ref function is a hack to allow for exceptions to this rule without
    # modifying the global COMP_WORDBREAKS environment variable.
    if type _get_comp_words_by_ref &>/dev/null; then
        _get_comp_words_by_ref -n : cur prev words cword
    else
        cur="${COMP_WORDS[COMP_CWORD]}"
        prev="${COMP_WORDS[COMP_CWORD-1]}"
        words=$COMP_WORDS
        cword=$COMP_CWORD
    fi

    cmd=""
    opts=""

    for i in ${words[@]}
    do
        case "${cmd},${i}" in
            ",$1")
                cmd="just"
                ;;
            *)
                ;;
        esac
    done

    case "${cmd}" in
        just)
            opts="-E -n -g -f -q -u -v -d -c -e -l -s -h -V --alias-style --check --chooser --clear-shell-args --color --command-color --dotenv-filename --dotenv-path --dry-run --dump-format --explain --global-justfile --highlight --justfile --list-heading --list-prefix --list-submodules --no-aliases --no-deps --no-dotenv --no-highlight --one --quiet --allow-missing --set --shell --shell-arg --shell-command --timestamp --timestamp-format --unsorted --unstable --verbose --working-directory --yes --changelog --choose --command --completions --dump --edit --evaluate --fmt --groups --init --list --man --request --show --summary --variables --help --version [ARGUMENTS]..."
                if [[ ${cur} == -* ]] ; then
                    COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                    return 0
                elif [[ ${cword} -eq 1 ]]; then
                    local recipes=$(just --summary 2> /dev/null)

                    if echo "${cur}" | \grep -qF '/'; then
                        local path_prefix=$(echo "${cur}" | sed 's/[/][^/]*$/\//')
                        local recipes=$(just --summary 2> /dev/null -- "${path_prefix}")
                        local recipes=$(printf "${path_prefix}%s\t" $recipes)
                    fi

                    if [[ $? -eq 0 ]]; then
                        COMPREPLY=( $(compgen -W "${recipes}" -- "${cur}") )
                        if type __ltrim_colon_completions &>/dev/null; then
                            __ltrim_colon_completions "$cur"
                        fi
                        return 0
                    fi
                fi
            case "${prev}" in
                --alias-style)
                    COMPREPLY=($(compgen -W "left right separate" -- "${cur}"))
                    return 0
                    ;;
                --chooser)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --color)
                    COMPREPLY=($(compgen -W "always auto never" -- "${cur}"))
                    return 0
                    ;;
                --command-color)
                    COMPREPLY=($(compgen -W "black blue cyan green purple red yellow" -- "${cur}"))
                    return 0
                    ;;
                --dotenv-filename)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --dotenv-path)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -E)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --dump-format)
                    COMPREPLY=($(compgen -W "json just" -- "${cur}"))
                    return 0
                    ;;
                --justfile)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --list-heading)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --list-prefix)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --shell)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --shell-arg)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --timestamp-format)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --working-directory)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -d)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --command)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --completions)
                    COMPREPLY=($(compgen -W "bash elvish fish nushell powershell zsh" -- "${cur}"))
                    return 0
                    ;;
                --list)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -l)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --request)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --show)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -s)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
    esac
}

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    complete -F _just -o nosort -o bashdefault -o default just
else
    complete -F _just -o bashdefault -o default just
fi
_just() {
    local i cur prev words cword opts cmd
    COMPREPLY=()

    # Modules use "::" as the separator, which is considered a wordbreak character in bash.
    # The _get_comp_words_by_ref function is a hack to allow for exceptions to this rule without
    # modifying the global COMP_WORDBREAKS environment variable.
    if type _get_comp_words_by_ref &>/dev/null; then
        _get_comp_words_by_ref -n : cur prev words cword
    else
        cur="${COMP_WORDS[COMP_CWORD]}"
        prev="${COMP_WORDS[COMP_CWORD-1]}"
        words=$COMP_WORDS
        cword=$COMP_CWORD
    fi

    cmd=""
    opts=""

    for i in ${words[@]}
    do
        case "${cmd},${i}" in
            ",$1")
                cmd="just"
                ;;
            *)
                ;;
        esac
    done

    case "${cmd}" in
        just)
            opts="-E -n -g -f -q -u -v -d -c -e -l -s -h -V --alias-style --check --chooser --clear-shell-args --color --command-color --dotenv-filename --dotenv-path --dry-run --dump-format --explain --global-justfile --highlight --justfile --list-heading --list-prefix --list-submodules --no-aliases --no-deps --no-dotenv --no-highlight --one --quiet --allow-missing --set --shell --shell-arg --shell-command --timestamp --timestamp-format --unsorted --unstable --verbose --working-directory --yes --changelog --choose --command --completions --dump --edit --evaluate --fmt --groups --init --list --man --request --show --summary --variables --help --version [ARGUMENTS]..."
                if [[ ${cur} == -* ]] ; then
                    COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                    return 0
                elif [[ ${cword} -eq 1 ]]; then
                    local recipes=$(just --summary 2> /dev/null)

                    if echo "${cur}" | \grep -qF '/'; then
                        local path_prefix=$(echo "${cur}" | sed 's/[/][^/]*$/\//')
                        local recipes=$(just --summary 2> /dev/null -- "${path_prefix}")
                        local recipes=$(printf "${path_prefix}%s\t" $recipes)
                    fi

                    if [[ $? -eq 0 ]]; then
                        COMPREPLY=( $(compgen -W "${recipes}" -- "${cur}") )
                        if type __ltrim_colon_completions &>/dev/null; then
                            __ltrim_colon_completions "$cur"
                        fi
                        return 0
                    fi
                fi
            case "${prev}" in
                --alias-style)
                    COMPREPLY=($(compgen -W "left right separate" -- "${cur}"))
                    return 0
                    ;;
                --chooser)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --color)
                    COMPREPLY=($(compgen -W "always auto never" -- "${cur}"))
                    return 0
                    ;;
                --command-color)
                    COMPREPLY=($(compgen -W "black blue cyan green purple red yellow" -- "${cur}"))
                    return 0
                    ;;
                --dotenv-filename)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --dotenv-path)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -E)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --dump-format)
                    COMPREPLY=($(compgen -W "json just" -- "${cur}"))
                    return 0
                    ;;
                --justfile)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --list-heading)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --list-prefix)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --shell)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --shell-arg)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --timestamp-format)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --working-directory)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -d)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --command)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --completions)
                    COMPREPLY=($(compgen -W "bash elvish fish nushell powershell zsh" -- "${cur}"))
                    return 0
                    ;;
                --list)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -l)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --request)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --show)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -s)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
    esac
}

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    complete -F _just -o nosort -o bashdefault -o default just
else
    complete -F _just -o bashdefault -o default just
fi
++ __hishtory_precommand
++ '[' -z '' ']'
++ return
+ shell_session_update
+ shell_session_save
+ '[' -n /Users/hojin/.bash_sessions/91FED469-C3C5-4563-B94B-670E356BC689.session ']'
+ echo -ne '\nSaving session...'

Saving session...+ umask 077
++ /bin/date +%s
+ echo 'echo Restored session: "$(/bin/date -r 1749196217)"'
+ declare -F shell_session_save_user_state
+ shell_session_history_allowed
+ '[' -n /Users/hojin/.bash_sessions/91FED469-C3C5-4563-B94B-670E356BC689.historynew ']'
+ local allowed=0
+ shopt -q histappend
+ '[' -n '' ']'
+ allowed=1
+ '[' 1 -eq 1 ']'
+ return 0
+ shell_session_save_history
+ shell_session_history_enable
+ umask 077
+ /usr/bin/touch /Users/hojin/.bash_sessions/91FED469-C3C5-4563-B94B-670E356BC689.historynew
+ HISTFILE=/Users/hojin/.bash_sessions/91FED469-C3C5-4563-B94B-670E356BC689.historynew
+ SHELL_SESSION_HISTORY=1
+ history -a
+ '[' -f /Users/hojin/.bash_history ']'
+ '[' '!' -s /Users/hojin/.bash_sessions/91FED469-C3C5-4563-B94B-670E356BC689.history ']'
+ echo -ne '\n...saving history...'

...saving history...+ umask 077
+ /bin/cat /Users/hojin/.bash_sessions/91FED469-C3C5-4563-B94B-670E356BC689.historynew
+ umask 077
+ /bin/cat /Users/hojin/.bash_sessions/91FED469-C3C5-4563-B94B-670E356BC689.historynew
+ :
+ '[' -n '' ']'
+ echo -ne '\n...'

...+ echo completed.
completed.
+ shell_session_delete_expired
+ '[' '!' -e /Users/hojin/.bash_sessions/_expiration_check_timestamp ']'
++ /usr/bin/find /Users/hojin/.bash_sessions/_expiration_check_timestamp -mtime -1d
+ '[' -z /Users/hojin/.bash_sessions/_expiration_check_timestamp ']'

real	0m0.666s
user	0m0.129s
sys	0m0.127s
