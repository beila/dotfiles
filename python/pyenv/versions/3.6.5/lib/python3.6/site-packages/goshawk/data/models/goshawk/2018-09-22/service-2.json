{
  "version":"2.0",
  "metadata":{
    "apiVersion":"2018-09-22",
    "endpointPrefix":"goshawk",
    "jsonVersion":"1.1",
    "protocol":"json",
    "serviceFullName":"Goshawk Control Plane",
    "serviceId":"goshawk",
    "signatureVersion":"v4",
    "signingName":"goshawk",
    "targetPrefix":"GoshawkControlPlaneService",
    "uid":"goshawk-2018-09-22"
  },
  "operations":{
    "CopyPackageVersions":{
      "name":"CopyPackageVersions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CopyPackageVersionsRequest"},
      "output":{"shape":"CopyPackageVersionsResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceExistsException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"API to copy package versions from one repo to another within same domain."
    },
    "CreateRepository":{
      "name":"CreateRepository",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateRepositoryRequest"},
      "output":{"shape":"CreateRepositoryResult"},
      "errors":[
        {"shape":"LimitExceededException"},
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceExistsException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"API to create a repository associated with a domain."
    },
    "DeleteDomainPermissionsPolicy":{
      "name":"DeleteDomainPermissionsPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDomainPermissionsPolicyRequest"},
      "output":{"shape":"DeleteDomainPermissionsPolicyResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"ConcurrentModificationException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"PolicyNotFoundException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"API to delete the resource's permissions policy set on a domain"
    },
    "DeletePackageVersion":{
      "name":"DeletePackageVersion",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PackageVersionRequest"},
      "output":{"shape":"DeletePackageVersionResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "DeleteRepository":{
      "name":"DeleteRepository",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteRepositoryRequest"},
      "output":{"shape":"DeleteRepositoryResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"Delete a repository associated with a domain."
    },
    "DeleteRepositoryPermissionsPolicy":{
      "name":"DeleteRepositoryPermissionsPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteRepositoryPermissionsPolicyRequest"},
      "output":{"shape":"DeleteRepositoryPermissionsPolicyResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"ConcurrentModificationException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"PolicyNotFoundException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"API to delete the resource's permissions policy set on a repository"
    },
    "DescribePackageVersion":{
      "name":"DescribePackageVersion",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PackageVersionRequest"},
      "output":{"shape":"DescribePackageVersionResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "DescribeRepository":{
      "name":"DescribeRepository",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeRepositoryRequest"},
      "output":{"shape":"DescribeRepositoryResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"Describe a repository associated with a domain."
    },
    "GetAuthorizationToken":{
      "name":"GetAuthorizationToken",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetAuthorizationTokenRequest"},
      "output":{"shape":"GetAuthorizationTokenResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"InvalidRequestException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "GetDomainPermissionsPolicy":{
      "name":"GetDomainPermissionsPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetDomainPermissionsPolicyRequest"},
      "output":{"shape":"GetDomainPermissionsPolicyResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"PolicyNotFoundException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"API to retrieve the resource's permissions policy set on a domain"
    },
    "GetPackageVersionDependencies":{
      "name":"GetPackageVersionDependencies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PackageVersionRequest"},
      "output":{"shape":"GetPackageVersionDependenciesResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "GetPackageVersionReadmeFile":{
      "name":"GetPackageVersionReadmeFile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PackageVersionRequest"},
      "output":{"shape":"GetPackageVersionReadmeFileResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "GetRepositoryPermissionsPolicy":{
      "name":"GetRepositoryPermissionsPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetRepositoryPermissionsPolicyRequest"},
      "output":{"shape":"GetRepositoryPermissionsPolicyResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"PolicyNotFoundException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"API to retrieve the resource's permissions policy set on a repository"
    },
    "GrantWritePermission":{
      "name":"GrantWritePermission",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GrantWritePermissionRequest"},
      "output":{"shape":"GrantWritePermissionResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"InvalidRequestException"},
        {"shape":"LimitExceededException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "ListPackageVersions":{
      "name":"ListPackageVersions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListPackageVersionsRequest"},
      "output":{"shape":"ListPackageVersionsResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "ListPackages":{
      "name":"ListPackages",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListPackagesRequest"},
      "output":{"shape":"ListPackagesResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "ListRepositories":{
      "name":"ListRepositories",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListRepositoriesRequest"},
      "output":{"shape":"ListRepositoriesResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "ListRepositoriesInDomain":{
      "name":"ListRepositoriesInDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListRepositoriesInDomainRequest"},
      "output":{"shape":"ListRepositoriesInDomainResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "ListWritePermissions":{
      "name":"ListWritePermissions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListWritePermissionsRequest"},
      "output":{"shape":"ListWritePermissionsResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "PutDomainPermissionsPolicy":{
      "name":"PutDomainPermissionsPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutDomainPermissionsPolicyRequest"},
      "output":{"shape":"PutDomainPermissionsPolicyResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"ConcurrentModificationException"},
        {"shape":"InvalidParameterException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"API to set a resource policy on a domain for access control"
    },
    "PutRepositoryPermissionsPolicy":{
      "name":"PutRepositoryPermissionsPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutRepositoryPermissionsPolicyRequest"},
      "output":{"shape":"PutRepositoryPermissionsPolicyResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"ConcurrentModificationException"},
        {"shape":"InvalidParameterException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"API to set a resource policy on a repository for access control"
    },
    "RevokeWritePermission":{
      "name":"RevokeWritePermission",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RevokeWritePermissionRequest"},
      "output":{"shape":"RevokeWritePermissionResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"InvalidRequestException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ]
    },
    "SearchPackages":{
      "name":"SearchPackages",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SearchPackagesRequest"},
      "output":{"shape":"SearchPackagesResult"},
      "errors":[
        {"shape":"AccessDeniedException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"InvalidRequestException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"Searches for packages"
    },
    "UpdateRepository":{
      "name":"UpdateRepository",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateRepositoryRequest"},
      "output":{"shape":"UpdateRepositoryResult"},
      "errors":[
        {"shape":"InvalidParameterException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"ConcurrentModificationException"},
        {"shape":"InternalServerErrorException"},
        {"shape":"ThrottlingException"}
      ],
      "documentation":"Update a repository"
    }
  },
  "shapes":{
    "AccessDeniedException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "AccountId":{
      "type":"string",
      "max":12,
      "min":12,
      "pattern":"[0-9]{12}"
    },
    "BooleanOptional":{"type":"boolean"},
    "ConcurrentModificationException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "CopyPackageVersionsRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "sourceRepositoryName",
        "targetRepositoryName",
        "packageType",
        "packageName",
        "versions"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "sourceRepositoryName":{"shape":"RepositoryName"},
        "targetRepositoryName":{"shape":"RepositoryName"},
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"},
        "versions":{"shape":"PackageVersionList"},
        "overwriteVersionIfExisting":{
          "shape":"BooleanOptional",
          "documentation":"If set to true, overwrites the version on target forcefully, or else if the version is existing on target and an attempt is made to overwrite then ResourceExistsException will be thrown. Default value is false."
        },
        "includeFromUpstream":{
          "shape":"BooleanOptional",
          "documentation":"Whether or not to include the package and available versions from upstreams of source repo. If set to true, then versions from upstream are available for copying. Otherwise, only retained versions are available for copying. Default value is false."
        }
      }
    },
    "CopyPackageVersionsResult":{
      "type":"structure",
      "members":{
      }
    },
    "CreateRepositoryRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "repositoryType":{"shape":"RepositoryType"},
        "repositoryDescription":{"shape":"RepositoryDescription"},
        "upstreams":{
          "shape":"UpstreamRepositoryConfigList",
          "documentation":"List of upstream repositories to be attached to a given repository."
        }
      }
    },
    "CreateRepositoryResult":{
      "type":"structure",
      "members":{
        "repository":{"shape":"RepositoryDescriptor"}
      }
    },
    "DeleteDomainPermissionsPolicyRequest":{
      "type":"structure",
      "required":["domainName"],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The name of the domain whose associated resource policy is to be deleted"
        },
        "policyRevision":{
          "shape":"PolicyRevision",
          "documentation":"The current revision of the resource policy to be deleted that is used for optimistic locking"
        }
      }
    },
    "DeleteDomainPermissionsPolicyResult":{
      "type":"structure",
      "members":{
        "policy":{
          "shape":"ResourcePolicy",
          "documentation":"The resource policy that was deleted after processing the request"
        }
      }
    },
    "DeletePackageVersionResult":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteRepositoryPermissionsPolicyRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName"
      ],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The name of the domain containing the repository whose associated resource policy is to be deleted"
        },
        "repositoryName":{
          "shape":"RepositoryName",
          "documentation":"The name of the repository whose associated resource policy is to be deleted"
        },
        "policyRevision":{
          "shape":"PolicyRevision",
          "documentation":"The current revision of the resource policy to be deleted that is used for optimistic locking"
        }
      }
    },
    "DeleteRepositoryPermissionsPolicyResult":{
      "type":"structure",
      "members":{
        "policy":{
          "shape":"ResourcePolicy",
          "documentation":"The resource policy that was deleted after processing the request"
        }
      }
    },
    "DeleteRepositoryRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"}
      }
    },
    "DeleteRepositoryResult":{
      "type":"structure",
      "members":{
        "repository":{"shape":"RepositoryDescriptor"}
      }
    },
    "DescribePackageVersionResult":{
      "type":"structure",
      "members":{
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"},
        "packageDisplayName":{"shape":"String"},
        "version":{"shape":"PackageVersion"},
        "description":{"shape":"String255"},
        "homePage":{"shape":"String"},
        "sourceCodeRepository":{"shape":"String"},
        "createDate":{"shape":"Timestamp"},
        "licenses":{"shape":"LicenseIdentityList"}
      }
    },
    "DescribeRepositoryRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"}
      }
    },
    "DescribeRepositoryResult":{
      "type":"structure",
      "members":{
        "repository":{"shape":"RepositoryDescriptor"}
      }
    },
    "DomainName":{
      "type":"string",
      "max":60,
      "min":2,
      "pattern":"[A-Za-z0-9][A-Za-z0-9_\\-]{1,59}"
    },
    "GetAuthorizationTokenRequest":{
      "type":"structure",
      "required":["domainName"],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"DomainName for which we are expecting to get an authorization token."
        }
      }
    },
    "GetAuthorizationTokenResult":{
      "type":"structure",
      "members":{
        "sessionToken":{"shape":"String"}
      }
    },
    "GetDomainPermissionsPolicyRequest":{
      "type":"structure",
      "required":["domainName"],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The name of the domain whose associated resource policy is to be retrieved"
        }
      }
    },
    "GetDomainPermissionsPolicyResult":{
      "type":"structure",
      "members":{
        "policy":{
          "shape":"ResourcePolicy",
          "documentation":"The resource policy that was retrieved after processing the request"
        }
      }
    },
    "GetPackageVersionDependenciesResult":{
      "type":"structure",
      "members":{
        "dependencies":{"shape":"PackageDependencyList"}
      }
    },
    "GetPackageVersionReadmeFileResult":{
      "type":"structure",
      "members":{
        "readme":{"shape":"String"}
      }
    },
    "GetRepositoryPermissionsPolicyRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName"
      ],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The name of the domain containing the repository whose associated resource policy is to be retrieved"
        },
        "repositoryName":{
          "shape":"RepositoryName",
          "documentation":"The name of the repository whose associated resource policy is to be retrieved"
        }
      }
    },
    "GetRepositoryPermissionsPolicyResult":{
      "type":"structure",
      "members":{
        "policy":{
          "shape":"ResourcePolicy",
          "documentation":"The resource policy that was retrieved after processing the request"
        }
      }
    },
    "GrantWritePermissionRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "packageType",
        "packageName",
        "principal"
      ],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The domain under which the shared repository for which the permission grant applies, resides"
        },
        "packageType":{
          "shape":"PackageType",
          "documentation":"The type of the package for which we grant permissions"
        },
        "packageNamespace":{
          "shape":"PackageNamespace",
          "documentation":"The namespace of the package for which we grant permissions"
        },
        "packageName":{
          "shape":"PackageName",
          "documentation":"The name of the package for which we grant permissions"
        },
        "principal":{
          "shape":"Principal",
          "documentation":"The principal of the account to which we grant permissions"
        }
      }
    },
    "GrantWritePermissionResult":{
      "type":"structure",
      "members":{
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"},
        "principals":{"shape":"PrincipalList"}
      }
    },
    "InternalServerErrorException":{
      "type":"structure",
      "members":{
      },
      "documentation":"This exception is thrown when there is a problem on the service side",
      "exception":true,
      "fault":true
    },
    "InvalidParameterException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidRequestException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "LicenseIdentity":{
      "type":"structure",
      "members":{
        "id":{"shape":"String255"},
        "name":{"shape":"String255"},
        "url":{"shape":"String"}
      }
    },
    "LicenseIdentityList":{
      "type":"list",
      "member":{"shape":"LicenseIdentity"}
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
        "resourceType":{"shape":"String"}
      },
      "exception":true
    },
    "ListPackageVersionsMaxResults":{
      "type":"integer",
      "max":50,
      "min":1
    },
    "ListPackageVersionsRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName",
        "packageType",
        "packageName"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"},
        "maxResults":{"shape":"ListPackageVersionsMaxResults"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "ListPackageVersionsResult":{
      "type":"structure",
      "members":{
        "defaultDisplayVersion":{"shape":"PackageVersion"},
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"},
        "versions":{"shape":"PackageVersionSummaryList"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "ListPackagesMaxResults":{
      "type":"integer",
      "max":50,
      "min":1
    },
    "ListPackagesRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "maxResults":{"shape":"ListPackagesMaxResults"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "ListPackagesResult":{
      "type":"structure",
      "members":{
        "packageCoordinateList":{"shape":"PackageCoordinateList"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "ListRepositoriesInDomainMaxResults":{
      "type":"integer",
      "max":50,
      "min":1
    },
    "ListRepositoriesInDomainRequest":{
      "type":"structure",
      "required":["domainName"],
      "members":{
        "domainName":{"shape":"DomainName"},
        "accountId":{"shape":"AccountId"},
        "maxResults":{"shape":"ListRepositoriesInDomainMaxResults"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "ListRepositoriesInDomainResult":{
      "type":"structure",
      "members":{
        "repositories":{"shape":"RepositoryList"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "ListRepositoriesMaxResults":{
      "type":"integer",
      "max":50,
      "min":1
    },
    "ListRepositoriesRequest":{
      "type":"structure",
      "members":{
        "domainName":{"shape":"DomainName"},
        "maxResults":{"shape":"ListRepositoriesMaxResults"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "ListRepositoriesResult":{
      "type":"structure",
      "members":{
        "repositories":{"shape":"RepositoryList"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "ListWritePermissionsRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "packageType",
        "packageName"
      ],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The domain under which the shared repository for which we query the permission grants, resides"
        },
        "packageType":{
          "shape":"PackageType",
          "documentation":"The type of the package whose grants we are listing"
        },
        "packageNamespace":{
          "shape":"PackageNamespace",
          "documentation":"The namespace of the package whose grants we are listing"
        },
        "packageName":{
          "shape":"PackageName",
          "documentation":"The name of the package whose grants we are listing"
        }
      }
    },
    "ListWritePermissionsResult":{
      "type":"structure",
      "members":{
        "principals":{"shape":"PrincipalList"}
      }
    },
    "NonNullString":{
      "type":"string",
      "min":1
    },
    "PackageCoordinate":{
      "type":"structure",
      "members":{
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"}
      }
    },
    "PackageCoordinateList":{
      "type":"list",
      "member":{"shape":"PackageCoordinate"}
    },
    "PackageDependency":{
      "type":"structure",
      "members":{
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"},
        "dependencyType":{"shape":"String"},
        "versionRequirement":{"shape":"String"}
      }
    },
    "PackageDependencyList":{
      "type":"list",
      "member":{"shape":"PackageDependency"}
    },
    "PackageName":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[A-Za-z0-9_][A-Za-z0-9._\\-~]{0,254}"
    },
    "PackageNamespace":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[A-Za-z0-9_][A-Za-z0-9._\\-~]{0,254}"
    },
    "PackageType":{
      "type":"string",
      "enum":[
        "npm",
        "maven"
      ]
    },
    "PackageVersion":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[A-Za-z0-9_][A-Za-z0-9._\\-]{0,254}"
    },
    "PackageVersionList":{
      "type":"list",
      "member":{"shape":"PackageVersion"}
    },
    "PackageVersionRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName",
        "packageType",
        "packageName",
        "packageVersion"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"},
        "packageVersion":{"shape":"PackageVersion"}
      }
    },
    "PackageVersionSummary":{
      "type":"structure",
      "required":["version"],
      "members":{
        "version":{"shape":"PackageVersion"}
      }
    },
    "PackageVersionSummaryList":{
      "type":"list",
      "member":{"shape":"PackageVersionSummary"}
    },
    "PaginationToken":{
      "type":"string",
      "max":2000,
      "min":1
    },
    "PolicyDocument":{
      "type":"string",
      "max":5120,
      "min":1
    },
    "PolicyNotFoundException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "PolicyRevision":{
      "type":"string",
      "max":100,
      "min":1
    },
    "Principal":{
      "type":"string",
      "max":2048,
      "min":1
    },
    "PrincipalList":{
      "type":"list",
      "member":{"shape":"Principal"}
    },
    "PutDomainPermissionsPolicyRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "policyDocument"
      ],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The name of the domain to set the resource policy on"
        },
        "policyRevision":{
          "shape":"PolicyRevision",
          "documentation":"The current revision of the resource policy to be set that is used for optimistic locking"
        },
        "policyDocument":{
          "shape":"PolicyDocument",
          "documentation":"A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain"
        }
      }
    },
    "PutDomainPermissionsPolicyResult":{
      "type":"structure",
      "members":{
        "policy":{
          "shape":"ResourcePolicy",
          "documentation":"The resource policy that was set after processing the request"
        }
      }
    },
    "PutRepositoryPermissionsPolicyRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName",
        "policyDocument"
      ],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The name of the domain containing the repository to set the resource policy on"
        },
        "repositoryName":{
          "shape":"RepositoryName",
          "documentation":"The name of the repository to set the resource policy on"
        },
        "policyRevision":{
          "shape":"PolicyRevision",
          "documentation":"The current revision of the resource policy to be set that is used for optimistic locking"
        },
        "policyDocument":{
          "shape":"PolicyDocument",
          "documentation":"A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository"
        }
      }
    },
    "PutRepositoryPermissionsPolicyResult":{
      "type":"structure",
      "members":{
        "policy":{
          "shape":"ResourcePolicy",
          "documentation":"The resource policy that was set after processing the request"
        }
      }
    },
    "Repository":{
      "type":"structure",
      "members":{
        "accountId":{"shape":"AccountId"},
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "repositoryDescription":{"shape":"RepositoryDescription"}
      }
    },
    "RepositoryDescription":{
      "type":"string",
      "max":1000
    },
    "RepositoryDescriptor":{
      "type":"structure",
      "members":{
        "accountId":{"shape":"AccountId"},
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "repositoryId":{"shape":"RepositoryId"},
        "repositoryType":{"shape":"RepositoryType"},
        "repositoryDescription":{"shape":"String"},
        "upstreams":{"shape":"UpstreamList"}
      }
    },
    "RepositoryId":{
      "type":"string",
      "max":100,
      "min":1
    },
    "RepositoryList":{
      "type":"list",
      "member":{"shape":"Repository"}
    },
    "RepositoryName":{
      "type":"string",
      "max":100,
      "min":2,
      "pattern":"[A-Za-z0-9][A-Za-z0-9._\\-]{1,99}"
    },
    "RepositoryType":{
      "type":"string",
      "enum":[
        "STANDARD",
        "SHADOW"
      ]
    },
    "ResourceExistsException":{
      "type":"structure",
      "members":{
        "resourceType":{"shape":"String"},
        "resourceName":{"shape":"String"}
      },
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ResourcePolicy":{
      "type":"structure",
      "members":{
        "resourceArn":{
          "shape":"NonNullString",
          "documentation":"The ARN of the resource associated with the resource policy"
        },
        "document":{
          "shape":"PolicyDocument",
          "documentation":"A valid displayable JSON Aspen policy string"
        },
        "revision":{
          "shape":"String",
          "documentation":"The current revision of the resource policy"
        }
      }
    },
    "RevokeWritePermissionRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "packageType",
        "packageName",
        "principal"
      ],
      "members":{
        "domainName":{
          "shape":"DomainName",
          "documentation":"The domain under which the shared repository for which the permission revoke applies, resides"
        },
        "packageType":{
          "shape":"PackageType",
          "documentation":"The type of the package for which we revoke permissions"
        },
        "packageNamespace":{
          "shape":"PackageNamespace",
          "documentation":"The namespace of the package for which we revoke permissions"
        },
        "packageName":{
          "shape":"PackageName",
          "documentation":"The name of the package for which we revoke permissions"
        },
        "principal":{
          "shape":"Principal",
          "documentation":"The principal of the account for which we revoke permissions"
        }
      }
    },
    "RevokeWritePermissionResult":{
      "type":"structure",
      "members":{
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"},
        "principals":{"shape":"PrincipalList"}
      }
    },
    "SearchPackagesMaxResults":{
      "type":"integer",
      "max":100,
      "min":1
    },
    "SearchPackagesRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName",
        "packageNamePrefix"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageNamePrefix":{"shape":"PackageName"},
        "maxResults":{"shape":"SearchPackagesMaxResults"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "SearchPackagesResult":{
      "type":"structure",
      "members":{
        "results":{"shape":"SearchPackagesResultItemsList"},
        "nextToken":{"shape":"PaginationToken"}
      }
    },
    "SearchPackagesResultItem":{
      "type":"structure",
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "packageType":{"shape":"PackageType"},
        "packageNamespace":{"shape":"PackageNamespace"},
        "packageName":{"shape":"PackageName"}
      }
    },
    "SearchPackagesResultItemsList":{
      "type":"list",
      "member":{"shape":"SearchPackagesResultItem"}
    },
    "String":{"type":"string"},
    "String255":{
      "type":"string",
      "max":255,
      "min":1
    },
    "ThrottlingException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "Timestamp":{"type":"timestamp"},
    "UpdateRepositoryRequest":{
      "type":"structure",
      "required":[
        "domainName",
        "repositoryName"
      ],
      "members":{
        "domainName":{"shape":"DomainName"},
        "repositoryName":{"shape":"RepositoryName"},
        "repositoryDescription":{"shape":"RepositoryDescription"},
        "upstreams":{"shape":"UpstreamRepositoryConfigList"}
      }
    },
    "UpdateRepositoryResult":{
      "type":"structure",
      "members":{
        "repository":{"shape":"RepositoryDescriptor"}
      }
    },
    "Upstream":{
      "type":"structure",
      "members":{
        "repositoryName":{"shape":"RepositoryName"}
      }
    },
    "UpstreamList":{
      "type":"list",
      "member":{"shape":"Upstream"}
    },
    "UpstreamRepositoryConfig":{
      "type":"structure",
      "required":["repositoryName"],
      "members":{
        "repositoryName":{"shape":"RepositoryName"}
      }
    },
    "UpstreamRepositoryConfigList":{
      "type":"list",
      "member":{"shape":"UpstreamRepositoryConfig"}
    }
  },
  "documentation":"The service that implements the control-plane APIs"
}
