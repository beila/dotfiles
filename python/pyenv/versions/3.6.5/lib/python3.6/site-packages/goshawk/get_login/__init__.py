import subprocess
import sys
import os

from awscli.customizations.commands import BasicCommand
from awscli.customizations.utils import create_client_from_parsed_globals

from .command_builder import GetLoginCommandBuilder

from .. import utils

from ..consts import ALLOWED_PACKAGE_MANGERS
from ..consts import GOSHAWK
from ..consts import SET_ALWAYS_AUTH


class UnsupportedPackageManagerException(Exception):
    def __init__(self, *args, **kwargs):
        super(self.__class__, self).__init__(self, *args, **kwargs)


class GoshawkLogin(BasicCommand):
    """Log in to package manager"""
    NAME = 'get-login'

    DESCRIPTION = ('Retrieves a login command for your Goshawk Repository')

    ARG_TABLE = [
        {
            'name': 'package-manager',
            'help_text': 'The package manager you are logging into '
                         '(currently only npm is supported)',
            'required': True,
        },
        {
            'name': 'domain-name',
            'help_text': 'Your Goshawk domain name',
            'required': True,
        },
        {
            'name': 'repository-name',
            'help_text': 'Your Goshawk repository name',
            'required': True,
        },
        {
            'name': 'execute',
            'action': 'store_true',
            'help_text': 'Directly execute the login command instead '
                         'of printing it to the console',
            'required': False,
            'default': False,
            'group_name': 'execute',
            'dest': 'execute',
        },
    ]

    def _run_main(self, parsed_args, parsed_globals):
        if(parsed_args.package_manager not in ALLOWED_PACKAGE_MANGERS):
            raise UnsupportedPackageManagerException("{} is not a supported package manager for get-login".format(parsed_args.package_manager))

        goshawk_client = create_client_from_parsed_globals(
            self._session, GOSHAWK, parsed_globals)

        registry_url = utils.get_npm_endpoint(
            domain=parsed_args.domain_name,
            repository=parsed_args.repository_name)

        result = goshawk_client.get_authorization_token(domainName=parsed_args.domain_name)

        auth_token = result['sessionToken']

        command_builder = GetLoginCommandBuilder(registry_url, auth_token)


        set_registry_command = command_builder.build_npm_set_registry_command()
        set_auth_token_command = command_builder.build_npm_set_auth_token_command()

        if parsed_args.execute:
            subprocess.check_call(set_registry_command)
            subprocess.check_call(set_auth_token_command)
            subprocess.check_call(SET_ALWAYS_AUTH)
            sys.stdout.write('Login Succeeded')
            sys.stdout.write(os.linesep)
        else:
            sys.stdout.write(' '.join(set_auth_token_command))
            sys.stdout.write(os.linesep)
            sys.stdout.write(' '.join(set_registry_command))
            sys.stdout.write(os.linesep)
            sys.stdout.write(' '.join(SET_ALWAYS_AUTH))
            sys.stdout.write(os.linesep)
        return 0
